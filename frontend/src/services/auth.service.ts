import { AxiosError } from 'axios';
import api from './api';

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface StudentRegistrationData {
  // User data
  email: string;
  password: string;
  // Profile data
  firstName: string;
  lastName: string;
  university: string;
  // No userId field - this is generated by the backend
}

export interface VerifyEmailData {
  email: string;
  otp: string;
}

export interface RequestPasswordResetData {
  email: string;
}

export interface ResetPasswordData {
  email: string;
  token: string;
  password: string;
}

export interface AuthResponse {
  user: {
    _id: string;
    email: string;
    role: string;
    isEmailVerified: boolean;
    createdAt: string;
  };
  profile: {
    _id: string;
    firstName: string;
    lastName: string;
    university?: string;
    [key: string]: any;
  };
  csrfToken?: string;
  token?: string;
  message?: string;
}

class AuthService {
  /**
   * Register a new student account
   */
  async registerStudent(data: StudentRegistrationData): Promise<AuthResponse> {
    try {
      // Log the registration payload for debugging
      console.log('Registration payload:', data);
      
      const response = await api.post('/api/auth/student/register', data);
      return response.data.data;
    } catch (error) {
      const axiosError = error as AxiosError<{ message: string }>;
      console.error('Registration error:', axiosError.response?.data);
      throw new Error(
        axiosError.response?.data?.message || 
        'Failed to register student account. Please try again.'
      );
    }
  }

  /**
   * Login student with email and password
   */
  async loginStudent(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      const response = await api.post('/api/auth/student/login', credentials);
      return response.data.data;
    } catch (error) {
      const axiosError = error as AxiosError<{ message: string }>;
      throw new Error(
        axiosError.response?.data?.message || 
        'Invalid email or password. Please try again.'
      );
    }
  }

  /**
   * Verify student email with OTP
   */
  async verifyStudentEmail(data: VerifyEmailData): Promise<void> {
    try {
      await api.post('/api/auth/student/verify-email', data);
    } catch (error) {
      const axiosError = error as AxiosError<{ message: string }>;
      throw new Error(
        axiosError.response?.data?.message || 
        'Failed to verify email. Please try again.'
      );
    }
  }

  /**
   * Request password reset for student
   */
  async requestStudentPasswordReset(data: RequestPasswordResetData): Promise<void> {
    try {
      await api.post('/api/auth/student/request-password-reset', data);
    } catch (error) {
      const axiosError = error as AxiosError<{ message: string }>;
      throw new Error(
        axiosError.response?.data?.message || 
        'Failed to request password reset. Please try again.'
      );
    }
  }

  /**
   * Reset student password
   */
  async resetStudentPassword(data: ResetPasswordData): Promise<void> {
    try {
      await api.post('/api/auth/student/reset-password', data);
    } catch (error) {
      const axiosError = error as AxiosError<{ message: string }>;
      throw new Error(
        axiosError.response?.data?.message || 
        'Failed to reset password. Please try again.'
      );
    }
  }

  /**
   * Logout user
   */
  async logout(): Promise<void> {
    try {
      await api.post('/api/auth/logout');
    } catch (error) {
      const axiosError = error as AxiosError<{ message: string }>;
      throw new Error(
        axiosError.response?.data?.message || 
        'Failed to logout. Please try again.'
      );
    }
  }
}

export default new AuthService(); 